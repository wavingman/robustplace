function displayColorLinearPatterns(pearl_counts)
   % Total number of pearls
    m = sum(pearl_counts);
    
    % Preallocate and generate the color array
    colors = zeros(1, m);
    index = 1;
    for k = 1:length(pearl_counts)
        colors(index:index + pearl_counts(k) - 1) = k;
        index = index + pearl_counts(k);
    end
    
    % Calculate the number of unique patterns using the specified formula
    num_patterns = factorial(m);
    for count = pearl_counts
        num_patterns = num_patterns / factorial(count);
    end
    
    % Generate all unique permutations of the colors
    perms_colors = perms(colors);
    unique_patterns = unique(perms_colors, 'rows');
    
    % Preallocate the color map (extend as needed)
    predefined_colors = ['r', 'g', 'b', 'c', 'm', 'y', 'k'];
    max_colors = length(predefined_colors);
    color_map = predefined_colors(1:max_colors);
    
    % Create a figure and get the figure handle
    fig = figure('units', 'normalized', 'outerposition', [0 0 1 1]);
    
    % Plot each pattern
    num_patterns = min(num_patterns, size(unique_patterns, 1));
    for i = 1:num_patterns
        pattern = unique_patterns(i, :);
        subplot(ceil(sqrt(num_patterns)), ceil(sqrt(num_patterns)), i, 'Parent', fig);
        hold on;
        x = 1:m; % Positions along a straight line
        y = zeros(1, m); % All y-coordinates are zero for a straight line
        for j = 1:m
            color_index = pattern(j);
            color = color_map(color_index);
            plot(x(j), y(j), 'o', 'MarkerFaceColor', color, 'MarkerEdgeColor', color, 'MarkerSize', 10);
        end
        % Connect the pearls in a straight line
        plot(x, y, 'k-');
        axis equal;
        axis off;
        title(['Pattern ', num2str(i)]);
    end
end
% ### Explanation:

% 1. **Input Parameter**: The function accepts a vector `pearl_counts`
% where each element represents the number of pearls of a specific color.
% 2. **Color Array**: The `colors` array is generated by repeating each
% color index according to the counts specified in `pearl_counts`. 3.
% **Unique Patterns Calculation**: The number of unique patterns is
% calculated using the specified formula: $$ \text{num\_patterns} =
% \frac{m!}{n1! \cdot n2! \cdot n3!} $$ where `m` is the total number of
% pearls, and `n1`, `n2`, `n3`, etc., are the counts of each color. 4.
% **Color Map**: The `color_map` array is extended to support more colors.
% You can further extend this array if needed. 5. **Plotting**: Each
% pattern is plotted in a subplot, and the pearls are displayed along a
% straight line. The x-coordinates represent the positions along the line,
% and all y-coordinates are set to zero.
% 
% This function should now correctly display all unique patterns of colored
% pearls along a straight line and use the specified formula for
% calculating the number of patterns.